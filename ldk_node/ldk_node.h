

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!



#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V6
	#ifndef UNIFFI_SHARED_HEADER_V6
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V6
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V6
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

// Task defined in Rust that Go executes
typedef void (*RustTaskCallback)(const void *, int8_t);

// Callback to execute Rust tasks using a Go routine
//
// Args:
//   executor: ForeignExecutor lowered into a uint64_t value
//   delay: Delay in MS
//   task: RustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*ForeignExecutorCallback)(uint64_t, uint32_t, RustTaskCallback, void *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// Continuation callback for UniFFI Futures
typedef void (*RustFutureContinuation)(void * , int8_t);

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Needed because we can't execute the callback directly from go.
void cgo_rust_task_callback_bridge_ldk_node(RustTaskCallback, const void *, int8_t);

int8_t uniffiForeignExecutorCallbackldk_node(uint64_t, uint32_t, RustTaskCallback, void*);

void uniffiFutureContinuationCallbackldk_node(void*, int8_t);

void uniffi_ldk_node_fn_free_builder(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_ldk_node_fn_constructor_builder_from_config(
	RustBuffer config,
	RustCallStatus* out_status
);

void* uniffi_ldk_node_fn_constructor_builder_new(
	RustCallStatus* out_status
);

void* uniffi_ldk_node_fn_method_builder_build(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_entropy_bip39_mnemonic(
	void* ptr,
	RustBuffer mnemonic,
	RustBuffer passphrase,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_entropy_seed_bytes(
	void* ptr,
	RustBuffer seed_bytes,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_entropy_seed_path(
	void* ptr,
	RustBuffer seed_path,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_esplora_server(
	void* ptr,
	RustBuffer esplora_server_url,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_gossip_source_p2p(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_gossip_source_rgs(
	void* ptr,
	RustBuffer rgs_server_url,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_liquidity_source_lsps2(
	void* ptr,
	RustBuffer address,
	RustBuffer node_id,
	RustBuffer token,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_listening_addresses(
	void* ptr,
	RustBuffer listening_addresses,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_network(
	void* ptr,
	RustBuffer network,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_builder_set_storage_dir_path(
	void* ptr,
	RustBuffer storage_dir_path,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_free_channelconfig(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_ldk_node_fn_constructor_channelconfig_new(
	RustCallStatus* out_status
);

int8_t uniffi_ldk_node_fn_method_channelconfig_accept_underpaying_htlcs(
	void* ptr,
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_fn_method_channelconfig_cltv_expiry_delta(
	void* ptr,
	RustCallStatus* out_status
);

uint64_t uniffi_ldk_node_fn_method_channelconfig_force_close_avoidance_max_fee_satoshis(
	void* ptr,
	RustCallStatus* out_status
);

uint32_t uniffi_ldk_node_fn_method_channelconfig_forwarding_fee_base_msat(
	void* ptr,
	RustCallStatus* out_status
);

uint32_t uniffi_ldk_node_fn_method_channelconfig_forwarding_fee_proportional_millionths(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_accept_underpaying_htlcs(
	void* ptr,
	int8_t value,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_cltv_expiry_delta(
	void* ptr,
	uint16_t value,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_force_close_avoidance_max_fee_satoshis(
	void* ptr,
	uint64_t value_sat,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_forwarding_fee_base_msat(
	void* ptr,
	uint32_t fee_msat,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_forwarding_fee_proportional_millionths(
	void* ptr,
	uint32_t value,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_max_dust_htlc_exposure_from_fee_rate_multiplier(
	void* ptr,
	uint64_t multiplier,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_channelconfig_set_max_dust_htlc_exposure_from_fixed_limit(
	void* ptr,
	uint64_t limit_msat,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_free_ldknode(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_close_channel(
	void* ptr,
	RustBuffer user_channel_id,
	RustBuffer counterparty_node_id,
	int8_t force,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_connect(
	void* ptr,
	RustBuffer node_id,
	RustBuffer address,
	int8_t persist,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_connect_open_channel(
	void* ptr,
	RustBuffer node_id,
	RustBuffer address,
	uint64_t channel_amount_sats,
	RustBuffer push_to_counterparty_msat,
	RustBuffer channel_config,
	int8_t announce_channel,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_disconnect(
	void* ptr,
	RustBuffer node_id,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_event_handled(
	void* ptr,
	RustCallStatus* out_status
);

int8_t uniffi_ldk_node_fn_method_ldknode_is_running(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_list_balances(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_list_channels(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_list_payments(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_list_peers(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_listening_addresses(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_new_onchain_address(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_next_event(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_node_id(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_payment(
	void* ptr,
	RustBuffer payment_hash,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_receive_payment(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer description,
	uint32_t expiry_secs,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_receive_payment_via_jit_channel(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer description,
	uint32_t expiry_secs,
	RustBuffer max_lsp_fee_limit_msat,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_receive_variable_amount_payment(
	void* ptr,
	RustBuffer description,
	uint32_t expiry_secs,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_receive_variable_amount_payment_via_jit_channel(
	void* ptr,
	RustBuffer description,
	uint32_t expiry_secs,
	RustBuffer max_proportional_lsp_fee_limit_ppm_msat,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_remove_payment(
	void* ptr,
	RustBuffer payment_hash,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_send_all_to_onchain_address(
	void* ptr,
	RustBuffer address,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_send_payment(
	void* ptr,
	RustBuffer invoice,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_send_payment_probes(
	void* ptr,
	RustBuffer invoice,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_send_payment_probes_using_amount(
	void* ptr,
	RustBuffer invoice,
	uint64_t amount_msat,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_send_payment_using_amount(
	void* ptr,
	RustBuffer invoice,
	uint64_t amount_msat,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_send_spontaneous_payment(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer node_id,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_send_spontaneous_payment_probes(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer node_id,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_send_to_onchain_address(
	void* ptr,
	RustBuffer address,
	uint64_t amount_msat,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_sign_message(
	void* ptr,
	RustBuffer msg,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_start(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_stop(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_sync_wallets(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_ldk_node_fn_method_ldknode_update_channel_config(
	void* ptr,
	RustBuffer user_channel_id,
	RustBuffer counterparty_node_id,
	void* channel_config,
	RustCallStatus* out_status
);

int8_t uniffi_ldk_node_fn_method_ldknode_verify_signature(
	void* ptr,
	RustBuffer msg,
	RustBuffer sig,
	RustBuffer pkey,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_method_ldknode_wait_next_event(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_func_default_config(
	RustCallStatus* out_status
);

RustBuffer uniffi_ldk_node_fn_func_generate_entropy_mnemonic(
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_ldk_node_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_continuation_callback_set(
	RustFutureContinuation callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_u8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_u8(
	void* handle,
	RustCallStatus* out_status
);

uint8_t ffi_ldk_node_rust_future_complete_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_i8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_i8(
	void* handle,
	RustCallStatus* out_status
);

int8_t ffi_ldk_node_rust_future_complete_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_u16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_u16(
	void* handle,
	RustCallStatus* out_status
);

uint16_t ffi_ldk_node_rust_future_complete_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_i16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_i16(
	void* handle,
	RustCallStatus* out_status
);

int16_t ffi_ldk_node_rust_future_complete_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_u32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_u32(
	void* handle,
	RustCallStatus* out_status
);

uint32_t ffi_ldk_node_rust_future_complete_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_i32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_i32(
	void* handle,
	RustCallStatus* out_status
);

int32_t ffi_ldk_node_rust_future_complete_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_u64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_u64(
	void* handle,
	RustCallStatus* out_status
);

uint64_t ffi_ldk_node_rust_future_complete_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_i64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_i64(
	void* handle,
	RustCallStatus* out_status
);

int64_t ffi_ldk_node_rust_future_complete_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_f32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_f32(
	void* handle,
	RustCallStatus* out_status
);

float ffi_ldk_node_rust_future_complete_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_f64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_f64(
	void* handle,
	RustCallStatus* out_status
);

double ffi_ldk_node_rust_future_complete_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_pointer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_pointer(
	void* handle,
	RustCallStatus* out_status
);

void* ffi_ldk_node_rust_future_complete_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_rust_buffer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_rust_future_complete_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_poll_void(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_cancel_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_free_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_ldk_node_rust_future_complete_void(
	void* handle,
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_func_default_config(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_func_generate_entropy_mnemonic(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_build(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_entropy_bip39_mnemonic(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_entropy_seed_bytes(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_entropy_seed_path(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_esplora_server(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_gossip_source_p2p(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_gossip_source_rgs(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_liquidity_source_lsps2(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_listening_addresses(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_network(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_builder_set_storage_dir_path(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_accept_underpaying_htlcs(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_cltv_expiry_delta(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_force_close_avoidance_max_fee_satoshis(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_forwarding_fee_base_msat(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_forwarding_fee_proportional_millionths(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_accept_underpaying_htlcs(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_cltv_expiry_delta(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_force_close_avoidance_max_fee_satoshis(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_forwarding_fee_base_msat(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_forwarding_fee_proportional_millionths(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_max_dust_htlc_exposure_from_fee_rate_multiplier(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_channelconfig_set_max_dust_htlc_exposure_from_fixed_limit(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_close_channel(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_connect(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_connect_open_channel(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_disconnect(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_event_handled(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_is_running(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_list_balances(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_list_channels(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_list_payments(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_list_peers(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_listening_addresses(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_new_onchain_address(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_next_event(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_node_id(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_receive_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_receive_payment_via_jit_channel(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_receive_variable_amount_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_receive_variable_amount_payment_via_jit_channel(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_remove_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_all_to_onchain_address(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_payment_probes(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_payment_probes_using_amount(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_payment_using_amount(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_spontaneous_payment(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_spontaneous_payment_probes(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_send_to_onchain_address(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_sign_message(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_start(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_stop(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_sync_wallets(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_update_channel_config(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_verify_signature(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_method_ldknode_wait_next_event(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_constructor_builder_from_config(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_constructor_builder_new(
	RustCallStatus* out_status
);

uint16_t uniffi_ldk_node_checksum_constructor_channelconfig_new(
	RustCallStatus* out_status
);

uint32_t ffi_ldk_node_uniffi_contract_version(
	RustCallStatus* out_status
);



